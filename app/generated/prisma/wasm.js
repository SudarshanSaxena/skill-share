
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userType: 'userType',
  providerType: 'providerType',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  mobile: 'mobile',
  passwordHash: 'passwordHash',
  streetNumber: 'streetNumber',
  streetName: 'streetName',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  companyName: 'companyName',
  phoneNumber: 'phoneNumber',
  businessTaxNumber: 'businessTaxNumber',
  createdAt: 'createdAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  category: 'category',
  experience: 'experience',
  natureOfWork: 'natureOfWork',
  hourlyRate: 'hourlyRate',
  createdAt: 'createdAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  category: 'category',
  name: 'name',
  description: 'description',
  expectedStartDate: 'expectedStartDate',
  expectedWorkingHours: 'expectedWorkingHours',
  hourlyRate: 'hourlyRate',
  currency: 'currency',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  providerId: 'providerId',
  price: 'price',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.TaskProgressScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  providerId: 'providerId',
  description: 'description',
  timestamp: 'timestamp'
};

exports.Prisma.TaskCompletionScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  markedByProvider: 'markedByProvider',
  acceptedByUser: 'acceptedByUser',
  markedAt: 'markedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserType = exports.$Enums.UserType = {
  user: 'user',
  provider: 'provider'
};

exports.ProviderType = exports.$Enums.ProviderType = {
  individual: 'individual',
  company: 'company'
};

exports.NatureOfWork = exports.$Enums.NatureOfWork = {
  online: 'online',
  onsite: 'onsite'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  open: 'open',
  offered: 'offered',
  in_progress: 'in_progress',
  completed: 'completed',
  rejected: 'rejected'
};

exports.Currency = exports.$Enums.Currency = {
  USD: 'USD',
  AUD: 'AUD',
  SGD: 'SGD',
  INR: 'INR'
};

exports.OfferStatus = exports.$Enums.OfferStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  User: 'User',
  Skill: 'Skill',
  Task: 'Task',
  Offer: 'Offer',
  TaskProgress: 'TaskProgress',
  TaskCompletion: 'TaskCompletion'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/sudarshansaxena/Desktop/skill-share/app/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "/Users/sudarshansaxena/Desktop/skill-share/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.8.2",
  "engineVersion": "2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider        = \"prisma-client-js\"\n  output          = \"../app/generated/prisma\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                String        @id @default(uuid())\n  userType          UserType\n  providerType      ProviderType?\n  firstName         String?\n  lastName          String?\n  email             String        @unique\n  mobile            String?\n  passwordHash      String\n  streetNumber      String?\n  streetName        String?\n  city              String?\n  state             String?\n  postalCode        String?\n  companyName       String?\n  phoneNumber       String?\n  businessTaxNumber String?       @db.Char(10)\n  createdAt         DateTime      @default(now())\n\n  // Relations\n  skills              Skill[]\n  tasks               Task[]         @relation(\"UserTasks\")\n  offers              Offer[]\n  taskProgressUpdates TaskProgress[] @relation(\"UserTaskProgress\")\n}\n\nmodel Skill {\n  id           String       @id @default(uuid())\n  provider     User         @relation(fields: [providerId], references: [id])\n  providerId   String\n  category     String\n  experience   String\n  natureOfWork NatureOfWork\n  hourlyRate   Float\n  createdAt    DateTime     @default(now())\n}\n\nmodel Task {\n  id                   String     @id @default(uuid())\n  user                 User       @relation(\"UserTasks\", fields: [userId], references: [id])\n  userId               String\n  category             String\n  name                 String\n  description          String\n  expectedStartDate    DateTime?\n  expectedWorkingHours Int?\n  hourlyRate           Float\n  currency             Currency\n  status               TaskStatus @default(open)\n  createdAt            DateTime   @default(now())\n\n  // Relations\n  offers          Offer[]\n  progressUpdates TaskProgress[]\n  taskCompletion  TaskCompletion?\n}\n\nmodel Offer {\n  id         String      @id @default(uuid())\n  task       Task        @relation(fields: [taskId], references: [id])\n  taskId     String\n  provider   User        @relation(fields: [providerId], references: [id])\n  providerId String\n  price      Float // add this\n  message    String? // optional message\n  status     OfferStatus @default(pending)\n  createdAt  DateTime    @default(now())\n}\n\nmodel TaskProgress {\n  id          String   @id @default(uuid())\n  task        Task     @relation(fields: [taskId], references: [id])\n  taskId      String\n  provider    User     @relation(\"UserTaskProgress\", fields: [providerId], references: [id])\n  providerId  String\n  description String\n  timestamp   DateTime @default(now())\n}\n\nmodel TaskCompletion {\n  id               String   @id @default(uuid())\n  task             Task     @relation(fields: [taskId], references: [id])\n  taskId           String   @unique\n  markedByProvider Boolean\n  acceptedByUser   Boolean?\n  markedAt         DateTime @default(now())\n}\n\nenum UserType {\n  user\n  provider\n}\n\nenum ProviderType {\n  individual\n  company\n}\n\nenum NatureOfWork {\n  online\n  onsite\n}\n\nenum TaskStatus {\n  open\n  offered\n  in_progress\n  completed\n  rejected\n}\n\nenum Currency {\n  USD\n  AUD\n  SGD\n  INR\n}\n\nenum OfferStatus {\n  pending\n  accepted\n  rejected\n}\n",
  "inlineSchemaHash": "1d7d35e75717f39a8a324811fc3f44bc36fe1df41df46f6e142be89a129a7c25",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userType\",\"kind\":\"enum\",\"type\":\"UserType\"},{\"name\":\"providerType\",\"kind\":\"enum\",\"type\":\"ProviderType\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mobile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"streetNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"streetName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"businessTaxNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"SkillToUser\"},{\"name\":\"tasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"UserTasks\"},{\"name\":\"offers\",\"kind\":\"object\",\"type\":\"Offer\",\"relationName\":\"OfferToUser\"},{\"name\":\"taskProgressUpdates\",\"kind\":\"object\",\"type\":\"TaskProgress\",\"relationName\":\"UserTaskProgress\"}],\"dbName\":null},\"Skill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SkillToUser\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"natureOfWork\",\"kind\":\"enum\",\"type\":\"NatureOfWork\"},{\"name\":\"hourlyRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Task\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserTasks\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expectedStartDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expectedWorkingHours\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"hourlyRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"enum\",\"type\":\"Currency\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TaskStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"offers\",\"kind\":\"object\",\"type\":\"Offer\",\"relationName\":\"OfferToTask\"},{\"name\":\"progressUpdates\",\"kind\":\"object\",\"type\":\"TaskProgress\",\"relationName\":\"TaskToTaskProgress\"},{\"name\":\"taskCompletion\",\"kind\":\"object\",\"type\":\"TaskCompletion\",\"relationName\":\"TaskToTaskCompletion\"}],\"dbName\":null},\"Offer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"OfferToTask\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OfferToUser\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OfferStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TaskProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskToTaskProgress\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserTaskProgress\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TaskCompletion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskToTaskCompletion\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"markedByProvider\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"acceptedByUser\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"markedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

